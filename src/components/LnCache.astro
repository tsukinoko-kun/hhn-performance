---
import { range } from "../script/jsx-helper"
import Code from "./Code.astro"
---

<p>
    Wenn das Programm ein Array-Element an einem bestimmten Index anfragt, muss dieses aus dem Arbeitsspeicher in die
    CPU geladen werden.
</p>

<p>
    Kein Arbeitsspeicher kann mit der Geschwindigkeit einer modernen CPU mithalten. Bei einer Größe von mehreren
    Gigabyte wäre das viel zu teuer. Die schnellste CPU bringt nichts, wenn sie auf den langsamen Arbeitsspeicher warten
    muss.
</p>
<p>
    Dieses Problem wird durch Caching gelöst. Die CPU verfügt über einen internen Speicher, der sehr klein ist (etwa
    100&nbsp;KB pro physischem CPU-Core). Wenn das Programm ein Byte aus dem Arbeitsspeicher anfordert, wird nicht nur
    dieses Byte, sondern auch die Bytes in der Nähe in den Cache geladen. Wenn wir also unsere Daten so anordnen, dass
    sie im Arbeitsspeicher zusammenliegen, werden sie auch zusammen (und gleichzeitig) in den Cache geladen.
</p>
<p>
    Einige Algorithmen basieren theoretisch auf Trees oder Graphs. Diese Datenstrukturen verteilen die Daten über den
    Arbeitsspeicher, damit ist der CPU-Cache nicht effektiv nutzbar. In der Praxis werden kritische Algorithmen daher
    mit Arrays implementiert.
</p>

<h3>Linked List</h3>

<Code
    code={`
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        // Jedes LinkedList-Element hat eine Referenz auf das nächste Element
        // Die einzelnen Elemente liegen wild verteilt im Arbeitspeicher
        LinkedList<Integer> list = new LinkedList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(5);
        list.add(6);
        list.add(7);
        list.add(8);
        list.add(9);
        list.add(10);
        for (int list) {
            System.out.println(x);
        }
    }
}
`}
/>

<p>
    Die CPU kann nicht wissen wo das nächste Element im Arbeitsspeicher liegt. Daher muss jedes Element einzeln geladen
    werden.
</p>

<div id="no-cache" class="flex flex-row gap-1">
    {range(10).map((_) => <div class="memory" />)}
</div>
<b>Legende</b>
<ul>
    <li><span class="text-ctp-subtext0">Grau</span>: List-Element im Arbeitsspeicher</li>
    <li><span class="text-ctp-blue">Blau</span>: List-Element im CPU-Cache</li>
    <li>Pfeil: Loop Index</li>
</ul>

<h3>Array</h3>

<Code
    code={`
public class Main {
    public static void main(String[] args) {
        // Array liegt sequentiell im Speicher
        int[] num = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        for (int x : num) {
            System.out.println(x);
        }
    }
}
`}
/>

<div id="cache" class="flex-rowg flex gap-1">
    {range(10).map((_) => <div class="memory" />)}
</div>
<b>Legende</b>
<ul>
    <li><span class="text-ctp-subtext0">Grau</span>: Array-Element im Arbeitsspeicher</li>
    <li><span class="text-ctp-blue">Blau</span>: Array-Element im CPU-Cache</li>
    <li>Pfeil: Loop Index</li>
</ul>

<style lang="scss">
    .memory {
        margin-top: 2rem;

        &:after {
            position: absolute;
            display: block;
            content: "↓";
            opacity: 0;
            font-size: 1.5rem;
            top: -2rem;
            left: calc(50% - 1rem);
        }
    }

    @keyframes uncached-memory-access {
        0% {
            transform: translateY(-4rem);
            opacity: 0;
        }
        12% {
            transform: translateY(0);
            opacity: 1;
        }
        16% {
            transform: translateY(0);
            opacity: 1;
        }
        20% {
            transform: translateY(-4rem);
            opacity: 0;
        }
        100% {
            transform: translateY(-4rem);
            opacity: 0;
        }
    }

    @keyframes uncached-memory-load {
        0% {
            background-color: rgb(var(--ctp-subtext0));
        }
        8% {
            background-color: rgb(var(--ctp-subtext0));
        }
        12% {
            background-color: rgb(var(--ctp-blue));
        }
        16% {
            background-color: rgb(var(--ctp-blue));
        }
        20% {
            background-color: rgb(var(--ctp-subtext0));
        }
        100% {
            background-color: rgb(var(--ctp-subtext0));
        }
    }

    #no-cache {
        @for $i from 0 through 9 {
            .memory:nth-child(#{$i + 1}) {
                animation: uncached-memory-load 6s infinite;
                animation-delay: $i * 0.5s;

                &:after {
                    animation: uncached-memory-access 6s infinite;
                    animation-delay: $i * 0.5s;
                }
            }
        }
    }

    @keyframes cached-memory-access {
        0% {
            transform: translateY(-4rem);
            opacity: 0;
        }
        12% {
            transform: translateY(0);
            opacity: 1;
        }
        13% {
            transform: translateY(0);
            opacity: 1;
        }
        17% {
            transform: translateY(-4rem);
            opacity: 0;
        }
        100% {
            transform: translateY(-4rem);
            opacity: 0;
        }
    }

    @keyframes cached-memory-load {
        0% {
            background-color: rgb(var(--ctp-subtext0));
        }
        2% {
            background-color: rgb(var(--ctp-subtext0));
        }
        8% {
            background-color: rgb(var(--ctp-blue));
        }
        60% {
            background-color: rgb(var(--ctp-blue));
        }
        64% {
            background-color: rgb(var(--ctp-subtext0));
        }
        100% {
            background-color: rgb(var(--ctp-subtext0));
        }
    }

    #cache {
        @for $i from 0 through 9 {
            .memory:nth-child(#{$i + 1}) {
                animation: cached-memory-load 6s infinite;
                animation-delay: 0.125s;

                &:after {
                    animation: cached-memory-access 6s infinite;
                    animation-delay: $i * 0.25s;
                }
            }
        }
    }
</style>
