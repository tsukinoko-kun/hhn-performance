---
import { Benchmark } from "../components/react/Benchmark"
import Layout from "../layouts/Layout.astro"
import { pub } from "../script/config"
import LnCache from "../components/LnCache.astro"
import StackVsHeap from "../components/StackVsHeap.astro"
import Code from "../components/Code.astro"
import Link from "../components/Link.astro"
import JmhSample from "../components/JmhSample.astro"
---

<Layout title="Runtime Performance">
    <p>
        Build- und Startup-Performance ist ein Thema für DevOps im vierten Semester.
        <br />
        Hier geht es nur um Runtime, also die Performance während das Programm beim Benutzer läuft.
    </p>

    <h2>Profiler</h2>
    <p>
        Ein Profiler ist ein Werkzeug, das Software analysiert, um zu sehen, wie effizient sie läuft. Es misst, wie viel
        Zeit und Ressourcen verschiedene Teile des Codes verbrauchen. Das hilft Entwicklern zu verstehen, welche Teile
        des Programms verbessert werden müssen, um die Gesamtleistung zu steigern.
    </p>
    <h3>IntelliJ</h3>
    <video src={pub("/video/intellij-profiler.webm")} muted controls class="mx-auto aspect-auto w-full max-w-3xl"
    ></video>
    <h3>Flame Graph</h3>
    <p>
        Ein Flame Graph ist ein visuelles Werkzeug, das verwendet wird, um die Leistung eines Programms zu analysieren,
        insbesondere um zu sehen, welche Teile des Codes die meiste Zeit in Anspruch nehmen.
    </p>
    <p>
        Ein Flame Graph besteht aus einer Reihe von farbigen Rechtecken, die in Schichten übereinander gestapelt sind.
        Jedes Rechteck repräsentiert eine Funktion oder Methode, die in deinem Programm aufgerufen wird. Die Breite
        eines Rechtecks zeigt an, wie viel Zeit diese Funktion im Vergleich zu anderen Funktionen in Anspruch nimmt. Je
        breiter das Rechteck, desto mehr Zeit wird in dieser Funktion verbracht.
    </p>
    <div style={`min-height: calc(24em + 200px)`}>
        <Benchmark client:visible client:only="react" />
    </div>

    <h2>Benchmarking</h2>
    <p>
        Bevor du irgendwelche Optimierungen vornimmst, solltest du einen Benchmark durchführen. Dabei wird die Zeit
        gemessen, die ein bestimmter Codeabschnitt benötigt, um ausgeführt zu werden. Ähnlich wie bei einem Unittest
        musst du als Entwickler Testdaten bereitstellen, um sicherzustellen, dass die Ergebnisse reproduzierbar sind. Da
        sich die Laufzeit von Durchlauf zu Durchlauf ändern kann (dieser Effekt ist bei Java sehr stark), wird der Code
        mehrmals ausgeführt. Damit wir Entwickler uns nicht mit Statistik beschäftigen müssen, gibt es dafür spezielle
        Tools.
    </p>

    <p>Für Java gibt es beispielsweise JMH (Java Microbenchmark Harness).</p>
    <p>Hier der Gradle Code für JMH:</p>
    <Code
        language="groovy"
        code={`
plugins {
    id "me.champeau.jmh" version "0.7.2"
}

sourceSets {
    jmh {
        java {
            // Pfad zu den Benchmark Klassen muss eventuell angepasst werden
            // Abhängig von der Projektstruktur
            srcDirs = ['src/jmh/java']
        }
    }
}

dependencies {
    jmh 'org.openjdk.jmh:jmh-core:1.37'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    jmh 'org.openjdk.jmh:jmh-generator-bytecode:1.37'
}
        `}
    />
    <p>Ausgeführt wird mit <code>./gradlew jmh</code></p>
    <JmhSample />
    <p>
        Der <b>Score</b> ist die Anzahl der Operationen (Funktionsdurchläufe) in einer bestimmten Zeit. Ein höherer Score
        ist besser.
        <br />
        <b>Error</b> ist die Standardabweichung. Ein niedriger Wert ist besser, er wird aber nie 0 sein. Eine hohe Standardabweichung
        bedeutet, dass die Messungen sehr unterschiedlich sind, das kann verschiedene Gründe haben, beispielsweise ein zu
        kleiner oder zufälliger Input. Ein anzustrebender Wert ist ~1% des Scores.
    </p>
    <p>
        Führe erst einen Benchmark aus, verändere dann so wenig wie möglich und teste erneut. So kannst du
        sicherstellen, dass jede Änderung tatsächlich eine Verbesserung darstellt.
    </p>
    <p>
        Die meisten Benchmarking tools sind einstellbar. Also die Anzahl der Durchläufe. Hier gilt es die Durchläufe so
        lange zu erhöhen, biss die Messergebnisse konsistent werden. Wer geduldig ist, kann auch die JVM Standardwerte
        verwenden.
    </p>
    <Code
        code={`
package de.hhn.seb.kprog;

import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.*;

@State(Scope.Benchmark)
public class RulesBenchmark {
    private World world;

    // Der Benchmark kann mit verschiedenen Inputwerten ausgeführt werden
    @Param({"64", "512"})
    private int n;

    // Setup ist wie bei Unittests
    // Hier werden die Testdaten initialisiert
    @Setup(Level.Trial)
    public void setup() {
        this.world = new World(this.n);
    }

    // Der Benchmark selbst (es kann mehrere geben):
    
    @Benchmark
    // im Normalfall willst du Throughput, das ist die Art der Messung
    @BenchmarkMode(Mode.Throughput)
    // Java optimiert Code während der Laufzeit, deshalb wird er zuerst "warm" gemacht
    // So hat Java genug Zeit, um den Code zu optimieren, bevor die Messung beginnt
    @Warmup(iterations = 5, time = 3)
    // Die eigentliche Messung
    @Measurement(iterations = 5, time = 3)
    // Der gesamte Benchmark (Warmup + Measurement) wird mehrmals ausgeführt
    // um statistische Schwankungen der Java Laufzeitoptimierung zu minimieren
    @Fork(value = 3)
    public void tick() {
        this.world.tick();
    }
}
`}
    />

    <h2>Contiguous Memory</h2>
    <LnCache />
    <h2>Stack & Heap</h2>
    <StackVsHeap />
    <h2>Daten&shy;kompression</h2>
    <p>
        Bei riesigen Datenmengen ist es manchmal sinnvoll, diese zu komprimieren, um Speicherplatz zu sparen. Hierbei
        geht es um grundlegende Techniken der Informatik wie
        <Link href="https://youtu.be/JsTptu56GM8">Huffman-Coding</Link>
        oder
        <Link href="https://youtu.be/RON2FmNrR58">Karnaugh map (KV-Diagramm)</Link>.
    </p>
    <p>
        Es kann auch lohnend sein mehrere Daten in einer Variable zu speichern. Wenn du beispielsweise zwei kleine
        Zahlen oder eine kleine Zahl und ein Boolean speichern willst, kann beides in ein Byte passen.
        <br />
        (Damit es bei negativen Zahlen keine Probleme gibt, <code>char</code> verwenden, nicht <code>byte</code>)
    </p>
    <Code
        code={`
public class Main {
    public static void main(String[] args) {
        // speichern der Zahl 5 + einem Boolean in einem Byte

        // erstes Bit ist für den boolean
        // 2-8 sind für die Zahl
        char data = 0;

        // Zahl 5 speichern
        data |= 5 << 1;

        // Boolean speichern
        data |= 1; // true

        // Ausgabe
        var zahl = data >> 1;
        var bool = (data & 0b01) == 0b01;

        System.out.printf("Zahl: %d, Boolean: %b\\n", zahl, bool);
        // Ausgabe: "Zahl: 5, Boolean: true"
    }
}
        `}
    />
    <p>
        Bei diesen Techniken arbeitet man meist mit einzelnen Bits. Jedoch gibt es in keiner Programmiersprache einen
        Datentyp für einzelne Bits. Das liegt daran, dass die CPU nur auf Byte-Ebene arbeitet. Ein Bit hat keine Adresse
        (Pointer) im Arbeitsspeicher.
    </p>
    <p>
        Bei kleinen Datenmengen kann man primitive Ganzzahl-Typen (in Java <code>char</code>(8 Bit), <code>int</code>(32
        Bit) und <code>long</code>(64 Bit)) verwenden.
    </p>
    <Code
        code={`
public class Main {
    public static void main(String[] args) {
        int bits = 0; // 8 Byte 32 bit

        // setze das 3. Bit von rechts auf 1
        bits |= 0b100;

        // setze das 4. Bit von rechts auf 1
        bits |= 0b1 << 3; // 0b1 bitshift um 3 Stellen nach links -> 0b1000

        // invertiere alle Bits
        bits = ~bits;

        // Schiebe alle Bits um 2 Stellen nach rechts
        bits >>= 2;
    }
}
`}
    />
    <p>
        Bei größeren Datenmengen gibt es verschiedene Möglichkeiten je nach Programmiersprache. Java bietet den Datentyp
        <code>BitSet</code> an.
    </p>
    <Code
        code={`
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bits = new BitSet(32); // 32 bit

        // setze das 3. Bit von rechts auf 1
        bits.set(2); // BitSet ist nullbasiert, daher Index 2

        // setze das 4. Bit von rechts auf 1
        bits.set(3);

        // invertiere alle Bits
        bits.flip(0, bits.length());

        // Schiebe alle Bits um 2 Stellen nach rechts
        bits = bits.get(2, bits.length());
    }
}
    `}
    />

    <h2>Syscalls</h2>
    <p>
        Syscalls sind Anfragen an das Betriebssystem, um bestimmte Aufgaben zu erledigen, die das Programm selbst nicht
        kann. Dazu gehören das Lesen und Schreiben von Dateien (Festplattenzugriff) oder den <Link
            href="https://en.wikipedia.org/wiki/Standard_streams">Standard streams</Link
        >, das Erstellen von Prozessen, das Erstellen von Netzwerkverbindungen und das Verwalten von Speicher
        (Arbeitsspeicher).
    </p>
    <p>
        Mehr Infos dazu gibt es in dem Video
        <Link href="https://youtu.be/UW7a1n3VEFg">System calls at the assembly level von Artem Pianykh </Link>
        .
    </p>
    <p>
        Syscalls sind langsam. Deshalb ist es wichtig, sie zu minimieren, um die Leistung des Programms zu verbessern.
    </p>
    <p>Das bedeutet:</p>
    <ul>
        <li>
            Häufig benötigte Dateiinhalte (von der Festplatte) im Arbeitsspeicher halten, anstatt sie jedes Mal neu zu
            lesen.
        </li>
        <li>
            Ressourcen wie Sockets (Netzwerkverbindungen) und Threads wiederverwenden, anstatt sie jedes Mal neu zu
            erstellen. Dafür gibt es sogenannte Pools, die eine begrenzte Anzahl von Ressourcen verwalten.
        </li>
        <li>
            Das erstellen und löschen von Objekten im Heap vermeiden. Du kannst Klassen eine Methode <code>reset()</code
            >
            hinzufügen, die das Objekt in den Ursprungszustand zurücksetzt, dann kannst du es wiederverwenden.
        </li>
        <li>
            Bedenke, dass die <code>+</code> Operation bei Strings einen neuen String erstellt. Wenn du mehr als drei <code
                >+</code
            > Operationen verwenden würdest (das ist nur ein grober Richtwert), lohnt es sich <Link
                href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/StringBuilder.html"
                ><code>StringBuilder</code></Link
            > zu verwenden. Erst, wenn du am Ende <Link
                href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/StringBuilder.html#toString()"
                ><code>StringBuilder::toString()</code></Link
            >
            aufrufst, wird ein großer neuer String erstellt.
        </li>
    </ul>

    <h2>SIMD</h2>
    <p>
        SIMD steht für Single Instruction, Multiple Data. Es ist eine Technik, die es der CPU ermöglicht, dieselbe
        Operation auf mehreren Daten gleichzeitig auszuführen. Das ist besonders nützlich, wenn du viele Daten hast, die
        alle die gleiche Operation benötigen. Das ist beispielsweise bei der Verarbeitung von Bild und Ton der Fall.
    </p>
    <p>
        Java ist nicht für gute SIMD-Unterstützung bekannt, daher bleibt es hier bei der Erwähnung, dass es das gibt.
        <br />
        Da es sich um eine CPU spezifische Optimierung handelt, sind Sprachen wie C, Rust oder Go besser geeignet.
    </p>
</Layout>
